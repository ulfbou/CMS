@using CMS.Server.Components.Shared.UI
@using CMS.Server.Models
@using CMS.Server.Components.Shared

<h3>Skapa nya boxar:</h3>
<button @onclick="ToggleButtonsVisibility">
    @(showButtons ? "Dölj Knappar" : "Visa Knappar")
</button>

@if (showButtons)
{
    <button @onclick="AddTextModel">Lägg till Text Box</button>
    <button @onclick="AddImageModel">Lägg till Image Box</button>
    <button @onclick="AddContainer">Lägg till Container</button>

    <button @onclick="ClearAll">Rensa Alla Boxar</button>
}

<div class="box-grid">
    @foreach (var box in boxes)
    {
        <div style="grid-row: @box.Row; grid-column: @box.Column;">
            @RenderContentItem(box, null)
        </div>
    }
</div>
<ConfigurationDialog @ref="Configuration"
                     ConfigurationButtonText="Spara"
                     CancelButtonText="Avbryt"
                     OnConfirm="OnConfigurationConfirm"
                     OnCancel="OnConfigurationCancel">
    @if (ConfigurationInput != null)
    {
        @ConfigurationInput
    }
</ConfigurationDialog>

@code {
    private RenderFragment RenderContentItem(ContentModel box, SectionModel? parentContainer) => @<li>
    <div @onclick="() => HandleImageClick(box)" style="text-align:@box.TextAlign;">
        @if (box is TextModel textModel)
        {
            <span style="border-radius:@($"{textModel.BorderRadius}px");color:@($"{textModel.Color}");font-size:@($"{textModel.FontSize}px");cursor: pointer;background-color:@textModel.BackgroundColor;padding:@($"{textModel.Padding}px");border:@($"{textModel.BorderPix}px solid {textModel.BackgroundBorder}");">@textModel.Text</span>
        }
        else if (box is ImageModel image)
        {
            <img src="@image.ImageUrl"
                 style="border-radius:@($"{image.BorderRadius}px");height:@($"{image.Height}px");width:@($"{image.Width}px");cursor: pointer;background-color:@image.BackgroundColor;padding:@($"{image.Padding}px");
border:@($"{image.BorderPix}px solid {image.BackgroundBorder}");"
                 alt="Image" />
        }
        </div>

    @if (box.IsEditing)
    {
        <button @onclick="() => Changes(box)">Ändra</button>
        <button @onclick="() => Save(box)">Spara</button>
    @if (parentContainer == null) // Only for top level
    {
        <select @onchange="(e) => ChangeTextAlign(box, e)" value="@box.TextAlign">
            <option value="left">Vänster</option>
            <option value="center">Center</option>
            <option value="right">Höger</option>
        </select>
        <br />

    @if (IsValidPosition(box.Row - 1, box.Column))
    {
        <button @onclick="() => MoveBoxUp(box)">Flytta Upp</button>
    }
    @if (IsValidPosition(box.Row + 1, box.Column))
    {
        <button @onclick="() => MoveBoxDown(box)">Flytta Ner</button>
    }
        <br />

    @if (IsValidPosition(box.Row, box.Column - 1))
    {
        <button @onclick="() => MoveBoxLeft(box)">Flytta Vänster</button>
    }
    @if (IsValidPosition(box.Row, box.Column + 1))
    {
        <button @onclick="() => MoveBoxRight(box)">Flytta Höger</button>
    }
        <br />
        <button @onclick="() => CloneContainer(box)">Klona Box</button>
        <button @onclick="() => RemoveBox(box)">Ta bort box</button>
    }
    else // Inner boxes
    {
        <button @onclick="() => MoveInnerUp(box, parentContainer)">Flytta upp</button>
        <button @onclick="() => MoveInnerDown(box, parentContainer)">Flytta ner</button>
        <button @onclick="() => RemoveInnerBox(box, parentContainer)">Ta bort box</button>

        <select @onchange="(e) => ChangeTextAlign(box, e)" value="@box.TextAlign">
            <option value="left">Vänster</option>
            <option value="center">Center</option>
            <option value="right">Höger</option>
        </select>

        <select @onchange="(e) => ChangeContainer(box, e)" value="@box.SelectedContainerId">
            <option value="">Välj Container</option>
            @foreach (var c in containers)
        {
            <option value="@c.Id">@c.Title</option>
        }
        </select>
    }
    }
    else
    {
    // Display only when not in edit mode
    @if (box.ShowEditButton)
    {
    // TODO: Remember the current state in order to restore on cancel.
    ConfigurationInput = RenderConfiguration(box);
    OnConfigurationCancel = EventCallback.Factory.Create(this, () => ToggleEdit(box));
    OnConfigurationConfirm = EventCallback.Factory.Create(this, () => ToggleEdit(box));

    Configuration.Show();
    }
    }

    @if (box is SectionModel container)
    {
        <ul style="background-color:@container.BackgroundColor;
height:@($"{container.Height}px");


border:@($"{container.BorderPix}px solid {container.BackgroundBorder}");">






            @foreach (var innerBox in container.InnerBoxes)
        {
            @RenderContentItem(innerBox, container)
        }
        </ul>

    @if (showButtons)
    {
        <button @onclick="() => AddInnerTextModel(container)">Lägg till Text Box i Container</button>
        <button @onclick="() => AddInnerImageModel(container)">Lägg till Image Box i Container</button>
        <br />
        <button @onclick="() => CloneContainer(container)">Klona Containern</button>
        <button @onclick="() => RemoveContainer(container)">Ta bort Container</button>
        <button @onclick="() => ClearContainer(container)">Rensa Innehåll</button>
        <p>Container ID: @container.Id</p>
        <div>
            @if (CanMoveBox(box, -1, 0))
        {
            <button @onclick="() => MoveBoxUp(box)">Flytta Upp</button>
        }
            @if (CanMoveBox(box, 1, 0))
        {
            <button @onclick="() => MoveBoxDown(box)">Flytta Ner</button>
        }
            @if (CanMoveBox(box, 0, -1))
        {
            <button @onclick="() => MoveBoxLeft(box)">Flytta Vänster</button>
        }
            @if (CanMoveBox(box, 0, 1))
        {
            <button @onclick="() => MoveBoxRight(box)">Flytta Höger</button>
        }

            <div>
                <label>Välj Storlek:</label>
                <input type="number" @bind="@container.Height" />
                <label>Välj Bakgrundsfärg:</label>
                <input type="color" @bind="@container.BackgroundColor" />
                <label>Välj Border Färg:</label>
                <input type="color" @bind="@container.BackgroundBorder" />
                <label>Välj Border storlek:</label>
                <input type="number" @bind="@container.BorderPix" />

            </div>
        </div>
    }
    }
    </li>;

    private RenderFragment RenderConfiguration(ContentModel box) =>@<div>
        <div>
            @if (box is ImageModel image)
        {
            <div>
                <label>Image URL:</label>
                <input type="text" @bind="@image.ImageUrl" />
                <br />

                <label>Height:</label>
                <input type="number" @bind="@image.Height" />
                <br />

                <label>Width:</label>
                <input type="number" @bind="@image.Width" />
                <br />

                <label>Border Radius:</label>
                <input type="number" @bind="@image.BorderRadius" />
                <br />

                <label>BackgroundColor:</label>
                <input type="color" @bind="@image.BackgroundColor" />
                <br />

                <label>BackgroundBorder:</label>
                <input type="color" @bind="@image.BackgroundBorder" />
                <br />

                <label>Border Px:</label>
                <input type="number" @bind="@image.BorderPix" />
                <br />

                <label>Background Padding:</label>
                <input type="number" @bind="@image.Padding" />
            </div>
        }
            @if (box is TextModel txtModel)
        {
            <div>
                <label>Text:</label>
                <input type="text" @bind="@txtModel.Text" />
                <br />
                <label>FontSize:</label>
                <input type="number" @bind="@txtModel.FontSize" />
                <br />

                <label>Color:</label>
                <input type="color" @bind="@txtModel.Color" />
                <br />

                <label>Background Padding:</label>
                <input type="number" @bind="@txtModel.Padding" />
                <br />

                <label>BackgroundColor:</label>
                <input type="color" @bind="@txtModel.BackgroundColor" />
                <br />

                <label>BackgroundBorder:</label>
                <input type="color" @bind="@txtModel.BackgroundBorder" />
                <br />

                <label>Border Px:</label>
                <input type="number" @bind="@txtModel.BorderPix" />
                <br />

                <label>Border Radius:</label>
                <input type="number" @bind="@txtModel.BorderRadius" />
                <br />
            </div>
        }

        </div>
    </div>;
}
